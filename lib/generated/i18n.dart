// Dart imports:
import 'dart:async';

// Flutter imports:
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Profile"
  String get profileProfile => "Profile";
  /// "Favorites"
  String get profileFavorites => "Favorites";
  /// "Name"
  String get loginFormUsername => "Name";
  /// "API Key"
  String get loginFormPassword => "API Key";
  /// "Login"
  String get loginFormLogin => "Login";
  /// "Hi there!"
  String get loginFormGreeting => "Hi there!";
  /// "Invalid username or API key"
  String get loginErrorsInvalidUsernameOrPassword => "Invalid username or API key";
  /// "Please enter your username"
  String get loginErrorsMissingUsername => "Please enter your username";
  /// "Please enter your API key"
  String get loginErrorsMissingPassword => "Please enter your API key";
  /// "Comment"
  String get commentCreateHint => "Comment";
  /// "Please wait..."
  String get commentCreateLoading => "Please wait...";
  /// "Error"
  String get commentCreateError => "Error";
  /// "Edit"
  String get commentListingCommandsEdit => "Edit";
  /// "Reply"
  String get commentListingCommandsReply => "Reply";
  /// "Delete"
  String get commentListingCommandsDelete => "Delete";
  /// "Toggle deleted comments"
  String get commentListingTooltipsToggleDeletedComments => "Toggle deleted comments";
  /// "There are no comments"
  String get commentListingNotificationsNoComments => "There are no comments";
  /// "Latest"
  String get postCategoriesLatest => "Latest";
  /// "Popular"
  String get postCategoriesPopular => "Popular";
  /// "Curated"
  String get postCategoriesCurated => "Curated";
  /// "Most viewed"
  String get postCategoriesMostViewed => "Most viewed";
  /// "Search..."
  String get searchHint => "Search...";
  /// "No result"
  String get searchNoResult => "No result";
  /// "Such empty"
  String get searchEmpty => "Such empty";
  /// "Settings"
  String get settings_string => "Settings";
  /// "App Settings"
  String get settingsAppSettings_string => "App Settings";
  /// "Appearance"
  String get settingsAppSettingsAppearance_string => "Appearance";
  /// "Theme"
  String get settingsAppSettingsAppearanceTheme_string => "Theme";
  /// "Dark"
  String get settingsAppSettingsAppearanceThemeDark => "Dark";
  /// "Light"
  String get settingsAppSettingsAppearanceThemeLight => "Light";
  /// "Language"
  String get settingsAppSettingsLanguage_string => "Language";
  /// "English"
  String get settingsAppSettingsLanguageEnglish => "English";
  /// "Vietnamese"
  String get settingsAppSettingsLanguageVietnamese => "Vietnamese";
  /// "Safe Mode"
  String get settingsAppSettingsSafeMode => "Safe Mode";
  /// "Blacklisted tags"
  String get settingsAppSettingsBlacklistedTags => "Blacklisted tags";
  /// "Login"
  String get sideMenuLogin => "Login";
  /// "Profile"
  String get sideMenuProfile => "Profile";
  /// "Settings"
  String get sideMenuSettings => "Settings";
  /// "Day"
  String get dateRangeDay => "Day";
  /// "Week"
  String get dateRangeWeek => "Week";
  /// "Month"
  String get dateRangeMonth => "Month";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_vi_VN extends I18n {
  const _I18n_vi_VN();

  /// "Hồ sơ"
  @override
  String get profileProfile => "Hồ sơ";
  /// "Yêu thích"
  @override
  String get profileFavorites => "Yêu thích";
  /// "Tài khoản"
  @override
  String get loginFormUsername => "Tài khoản";
  /// "API Key"
  @override
  String get loginFormPassword => "API Key";
  /// "Đăng nhập"
  @override
  String get loginFormLogin => "Đăng nhập";
  /// "Hi!"
  @override
  String get loginFormGreeting => "Hi!";
  /// "Tài khoản hoặc API key không chính xác"
  @override
  String get loginErrorsInvalidUsernameOrPassword => "Tài khoản hoặc API key không chính xác";
  /// "Chưa nhập tên tài khoản"
  @override
  String get loginErrorsMissingUsername => "Chưa nhập tên tài khoản";
  /// "Chưa nhập API key"
  @override
  String get loginErrorsMissingPassword => "Chưa nhập API key";
  /// "Bình luận"
  @override
  String get commentCreateHint => "Bình luận";
  /// "Đợi tí..."
  @override
  String get commentCreateLoading => "Đợi tí...";
  /// "Lỗi"
  @override
  String get commentCreateError => "Lỗi";
  /// "Sửa"
  @override
  String get commentListingCommandsEdit => "Sửa";
  /// "Phản hồi"
  @override
  String get commentListingCommandsReply => "Phản hồi";
  /// "Xóa"
  @override
  String get commentListingCommandsDelete => "Xóa";
  /// "Bật tắt bình luận đã xóa"
  @override
  String get commentListingTooltipsToggleDeletedComments => "Bật tắt bình luận đã xóa";
  /// "Không có bình luận"
  @override
  String get commentListingNotificationsNoComments => "Không có bình luận";
  /// "Mới"
  @override
  String get postCategoriesLatest => "Mới";
  /// "Phổ biến"
  @override
  String get postCategoriesPopular => "Phổ biến";
  /// "Tuyển chọn"
  @override
  String get postCategoriesCurated => "Tuyển chọn";
  /// "Xem nhiều"
  @override
  String get postCategoriesMostViewed => "Xem nhiều";
  /// "Tìm..."
  @override
  String get searchHint => "Tìm...";
  /// "Không có kết quả"
  @override
  String get searchNoResult => "Không có kết quả";
  /// "Trống"
  @override
  String get searchEmpty => "Trống";
  /// "Cài đặt"
  @override
  String get settings_string => "Cài đặt";
  /// "Cài đặt ứng dụng"
  @override
  String get settingsAppSettings_string => "Cài đặt ứng dụng";
  /// "Hiển thị"
  @override
  String get settingsAppSettingsAppearance_string => "Hiển thị";
  /// "Nền"
  @override
  String get settingsAppSettingsAppearanceTheme_string => "Nền";
  /// "Tối"
  @override
  String get settingsAppSettingsAppearanceThemeDark => "Tối";
  /// "Sáng"
  @override
  String get settingsAppSettingsAppearanceThemeLight => "Sáng";
  /// "Ngôn ngữ"
  @override
  String get settingsAppSettingsLanguage_string => "Ngôn ngữ";
  /// "Tiếng Anh"
  @override
  String get settingsAppSettingsLanguageEnglish => "Tiếng Anh";
  /// "Tiếng Việt"
  @override
  String get settingsAppSettingsLanguageVietnamese => "Tiếng Việt";
  /// "Safe Mode"
  @override
  String get settingsAppSettingsSafeMode => "Safe Mode";
  /// "Danh sách đen"
  @override
  String get settingsAppSettingsBlacklistedTags => "Danh sách đen";
  /// "Đăng nhập"
  @override
  String get sideMenuLogin => "Đăng nhập";
  /// "Hồ sơ"
  @override
  String get sideMenuProfile => "Hồ sơ";
  /// "Cài đặt"
  @override
  String get sideMenuSettings => "Cài đặt";
  /// "Ngày"
  @override
  String get dateRangeDay => "Ngày";
  /// "Tuần"
  @override
  String get dateRangeWeek => "Tuần";
  /// "Tháng"
  @override
  String get dateRangeMonth => "Tháng";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("vi", "VN")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("vi_VN" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_vi_VN());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("vi" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_vi_VN());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}
