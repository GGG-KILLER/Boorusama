{
  description = "Flutter 3.13.x";
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };
  outputs =
    {
      nixpkgs,
      flake-utils,
      ...
    }:
    flake-utils.lib.eachDefaultSystem (
      system:
      let
        pkgs = import nixpkgs {
          inherit system;
          config = {
            android_sdk.accept_license = true;
            allowUnfree = true;
          };
        };
      in
      {
        devShell =
          let
            # Declaration of versions for everything. This is useful since these
            # versions may be used in multiple places in this Nix expression.
            android = {
              versions = {
                platformTools = "35.0.2";
                buildTools = "30.0.3";
                ndk = [ "21.4.7075529" ];
                cmake = "3.18.1";
              };

              platforms = [
                "34"
                "31"
                "28"
              ];

              abis = [
                "armeabi-v7a"
                "arm64-v8a"
              ];
            };

            androidComposition = pkgs.androidenv.composeAndroidPackages {
              platformToolsVersion = android.versions.platformTools;
              buildToolsVersions = [
                "35.0.0"
                android.versions.buildTools
              ];
              platformVersions = android.platforms;
              abiVersions = android.abis;

              includeNDK = true;
              ndkVersions = android.versions.ndk;
              cmakeVersions = [ android.versions.cmake ];

              # Accepting more licenses declaratively:
              extraLicenses = [
                # Already accepted for you with the global accept_license = true or
                # licenseAccepted = true on androidenv.
                # "android-sdk-license"

                # These aren't, but are useful for more uncommon setups.
                "android-sdk-preview-license"
                "android-googletv-license"
                "android-sdk-arm-dbt-license"
                "google-gdk-license"
                "intel-android-extra-license"
                "intel-android-sysimage-license"
                "mips-android-sysimage-license"
              ];
            };

            androidSdk = androidComposition.androidsdk;
            platformTools = androidComposition.platform-tools;
            jdk = pkgs.jdk17;
          in
          pkgs.mkShell rec {
            packages = with pkgs; [
              androidSdk
              platformTools
              flutter
              jdk
            ];

            buildInputs = with pkgs; [ libepoxy.dev ];

            ANDROID_SDK_ROOT = "${androidSdk}/libexec/android-sdk";
            ANDROID_NDK_ROOT = "${ANDROID_SDK_ROOT}/ndk-bundle";
            JAVA_HOME = jdk.home;

            # Ensures that we don't have to use a FHS env by using the nix store's aapt2.
            GRADLE_OPTS = "-Dorg.gradle.project.android.aapt2FromMavenOverride=${ANDROID_SDK_ROOT}/build-tools/35.0.0/aapt2";

            shellHook = ''
              # Add cmake to the path.
              cmake_root="$(echo "$ANDROID_SDK_ROOT/cmake/${android.versions.cmake}"*/)"
              export PATH="$cmake_root/bin:$PATH"

              # Write out local.properties for Android Studio.
              cat <<EOF > local.properties
              # This file was automatically generated by nix-shell.
              sdk.dir=$ANDROID_SDK_ROOT
              ndk.dir=$ANDROID_NDK_ROOT
              cmake.dir=$cmake_root
              EOF
            '';
          };

        packages.default = pkgs.flutter.buildFlutterApplication rec {
          pname = "boorusama-foss";
          version = "unstable-2024-11-20";

          src = ./.;

          nativeBuildInputs = with pkgs; [
            autoPatchelfHook
            libepoxy
            jdk17
          ];

          buildInputs = with pkgs; [
            alsa-lib
            libGL
            libdrm
            mesa
          ];

          autoPubspecLock = src + "/pubspec.lock";
          gitHashes = {
            context_menus = "sha256-TglVuFdNGC8st08F8kVhREKG0aMr2qIgx9+qDJhBVl8=";
            reorderables = "sha256-LTeCKYQZLHoKinmBHv0v9bpA3oEHu5fGVOZQ+JOzY84=";
            webview_cookie_manager = "sha256-6ON1fW4F/FzCqclTPjMwgp+5VP8Lwtw4iEazidt5ha8=";
            flutter_launcher_icons = "sha256-xF0koleUqu0wYRujZgfUvlZkIuYxLqtCh3SOx4jEY+k=";
          };

          meta.mainProgram = "boorusama";
        };
      }
    );
}
